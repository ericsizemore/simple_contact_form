<?php

/**
* @author    Eric Sizemore <admin@secondversion.com>
* @package   SV's Simple Contact
* @link      http://www.secondversion.com/downloads/
* @version   1.0.10
* @copyright (C) 2005 - 2016 Eric Sizemore
* @license
*
*	SV's Simple Contact is free software: you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by the 
*	Free Software Foundation, either version 3 of the License, or (at your option) 
*	any later version.
*
*	This program is distributed in the hope that it will be useful, but WITHOUT ANY 
*	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
*	PARTICULAR PURPOSE.  See the GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along with 
*	this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Based on PHPCaptcha 1.0.3
*
* @link http://www.phpcaptcha.org Securimage PHP CAPTCHA
* @copyright 2007 Drew Phillips <drew@drew-phillips.com>
*/

if (!defined('IN_SC'))
{
	die('You are not supposed to be here.');
}

define('SC_IMAGE_JPEG', 1);
define('SC_IMAGE_PNG' , 2);
define('SC_IMAGE_GIF' , 3);

// Captcha class...
class captcha
{
	/**
	* The desired width of the CAPTCHA image.
	*
	* @var integer
	*/
	var $image_width = 175;

	/**
	* The desired width of the CAPTCHA image.
	*
	* @var integer
	*/
	var $image_height = 45;

	/**
	* The image format for output.
	* Valid options: SC_IMAGE_PNG, SC_IMAGE_JPG, or SC_IMAGE_GIF
	*
	* @var integer
	*/
	var $image_type = SC_IMAGE_PNG;

	/**
	* The length of the code to generate.
	*
	* @var integer
	*/
	var $code_length = 5;

	/**
	* The character set for individual characters in the image.
	* Advised that you do not alter this.
	*
	* @var string
	*/
	var $charset = 'ABCDEFGHKLMNPRSTUVWYZ23456789';

	/**
	* The path to the TTF font file to load.
	*
	* @var string
	*/
	var $ttf_file = '';

	/**
	* The font size.
	* Depending on your version of GD, this should be specified as the pixel
	* size (GD1) or point size (GD2).
	*
	* @var integer
	*/
	var $font_size = 26;

	/**
	* The minimum angle in degrees, with 0 degrees being left-to-right reading text.
	* Higher values represent a counter-clockwise rotation.
	* For example, a value of 90 would result in bottom-to-top reading text.
	*
	* @var integer
	*/
	var $text_angle_minimum = -10;

	/**
	* The minimum angle in degrees, with 0 degrees being left-to-right reading text.
	* Higher values represent a counter-clockwise rotation.
	* For example, a value of 90 would result in bottom-to-top reading text.
	*
	* @var integer
	*/
	var $text_angle_maximum = 10;

	/**
	* The X-Position on the image where letter drawing will begin.
	* This value is in pixels from the left side of the image.
	*
	* @var integer
	*/
	var $text_x_start = 8;

	/**
	* Letters can be spaced apart at random distances.
	* This is the minimum distance between two letters.
	* This should be at least as wide as a font character.
	* Small values can cause letters to be drawn over eachother.
	*
	* @var integer
	*/
	var $text_minimum_distance = 30;

	/**
	* Letters can be spaced apart at random distances.
	* This is the maximum distance between two letters.
	* This should be at least as wide as a font character.
	* Small values can cause letters to be drawn over eachother.
	*
	* @var integer
	*/
	var $text_maximum_distance = 35;

	/**
	* The text colors to use for drawing characters.
	*
	* @var array
	*/
	var $text_color = array('#ff0000', '#095DC3', '#F5452E', '#7E17FD', '#1A8CFF', '#3333FF');

	// END USER CONFIGURATION
	/**
	* The gd image resource.
	*
	* @var resource
	*/
	var $im;

	/**
	* The code generated by the script.
	*
	* @var string
	*/
	var $code;


	/**
	* Class constructor.
	*/
	function captcha($ttf_folder, $ttf_files = array())
	{
		if (!is_dir($ttf_folder))
		{
			die('TrueTypeFont directory does not exist!');
		}

		if (!is_array($ttf_files) OR !count($ttf_files))
		{
			die('We need TrueTypeFont fonts to make an image, where are they!?');
		}
		$this->ttf_file = $ttf_folder . $ttf_files[array_rand($ttf_files)];
	}

	/**
	* Generate and output the image.
	*/
	function make_captcha()
	{
		$this->im = imagecreate($this->image_width, $this->image_height);
		$bgcolor = imagecolorallocate($this->im, 255, 255, 255);
		$cslen = strlen($this->charset);

		$this->code = '';

		for ($i = 1; $i <= $this->code_length; ++$i)
		{
			$this->code .= strtoupper($this->charset{mt_rand(0, $cslen - 1)});
		}

		$this->draw_lines();
		$this->draw_word();
		$this->arc_lines();
		$this->output();
	}

	/**
	* Draw arced lines over the text.
	*/
	function arc_lines()
	{
		imagesetthickness($this->im, 1);

		$linecolor = $this->random_color();
		$xpos = $this->text_x_start + ($this->font_size * 2) + mt_rand(-5, 5);
		$width = ($this->image_width / 2.66) + mt_rand(3, 10);
		$height = ($this->font_size * 2.14) - mt_rand(3, 10);

		if (mt_rand(0, 100) % 2 == 0)
		{
			$start = mt_rand(0, 66);
			$ypos = ($this->image_height / 2) - mt_rand(5, 15);
			$xpos += mt_rand(5, 15);
		}
		else
		{
			$start = mt_rand(180, 246);
			$ypos = ($this->image_height / 2) + mt_rand(5, 15);
		}

		$end = $start + mt_rand(75, 110);

		imagearc($this->im, $xpos, $ypos, $width, $height, $start, $end, $linecolor);

		$linecolor = $this->random_color();

		if (mt_rand(1, 75) % 2 == 0)
		{
			$start = mt_rand(45, 111);
			$ypos = ($this->image_height / 2) - mt_rand(5, 15);
			$xpos += mt_rand(5, 15);
		}
		else
		{
			$start = mt_rand(200, 250);
			$ypos = ($this->image_height / 2) + mt_rand(5, 15);
		}
		$end = $start + mt_rand(75, 100);
		imagearc($this->im, ($this->image_width * .75), $ypos, $width, $height, $start, $end, $linecolor);
	}

	/**
	* Draw lines on the image.
	*/
	function draw_lines()
	{
		$linecolor = $this->random_color();
		imagesetthickness($this->im, 1);

		$rand_distance = mt_rand(15, 20);

		// Vertical lines
		for ($x = 1; $x < $this->image_width; $x += $rand_distance)
		{
			imageline($this->im, $x, 0, $x, $this->image_height, $linecolor);
		}

		// Horizontal lines
		for ($y = 11; $y < $this->image_height; $y += $rand_distance)
		{
			imageline($this->im, 0, $y, $this->image_width, $y, $linecolor);
		}

		// Angled lines
		for ($x = -($this->image_height); $x < $this->image_width; $x += $rand_distance)
		{
			imageline($this->im, $x, 0, $x + $this->image_height, $this->image_height, $linecolor);
		}

		for ($x = $this->image_width + $this->image_height; $x > 0; $x -= $rand_distance)
		{
			imageline($this->im, $x, 0, $x - $this->image_height, $this->image_height, $linecolor);
		}
	}

	/**
	* Draw the CAPTCHA code over the image
	*/
	function draw_word()
	{
		$x = $this->text_x_start;
		$strlen = strlen($this->code);
		$y_min = ($this->image_height / 2) + ($this->font_size / 2) - 2;
		$y_max = ($this->image_height / 2) + ($this->font_size / 2) + 2;

		for ($i = 0; $i < $strlen; ++$i)
		{
			$font_color = $this->random_color();
			$angle = mt_rand($this->text_angle_minimum, $this->text_angle_maximum);
			$y = mt_rand($y_min, $y_max);
			imagettftext($this->im, $this->font_size, $angle, $x, $y, $font_color, $this->ttf_file, $this->code{$i});
			$x += mt_rand($this->text_minimum_distance, $this->text_maximum_distance);
		}
	}

	/**
	* Allocates a random color for the font, lines, etc.
	*/
	function random_color()
	{
		shuffle($this->text_color);
		$color = $this->text_color[array_rand($this->text_color)];
		$color = imagecolorallocate($this->im, hexdec(substr($color, 1, 2)), hexdec(substr($color, 3, 2)), hexdec(substr($color, 5, 2)));
		return $color;
	}

	/**
	* Output image to the browser.
	*/
	function output()
	{
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
		header('Cache-Control: no-store, no-cache, must-revalidate');
		header('Cache-Control: post-check=0, pre-check=0', false);
		header('Pragma: no-cache');

		// Smooth
		imagefilter($this->im, IMG_FILTER_SMOOTH, 50);

		// Output
		switch ($this->image_type)
		{
			case SC_IMAGE_JPEG:
				header('Content-Type: image/jpeg');
				imagejpeg($this->im, NULL, 90);
				break;
			case SC_IMAGE_GIF:
				header('Content-Type: image/gif');
				imagegif($this->im);
				break;
			case SC_IMAGE_PNG:
			default:
				header('Content-Type: image/png');
				imagepng($this->im);
				break;
		}
		imagedestroy($this->im);
	}
}
